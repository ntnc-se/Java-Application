
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author __ntnc__
 */
public class GamePlayScreen extends javax.swing.JFrame implements KeyListener, ActionListener, Runnable {

    //MenuUser m = new MenuUser();
    Random r = new Random();
    /**
     * Creates new form MainScreen2
     */
    private boolean play = false;
    private Timer time;
    private int delay = 2;
    private int score = 0;
    private int playerX = 330;
    
    private int ballposX = 370;
    private int ballposY = 500;
    private int ballXdir = r.nextInt(2)-2;
    private int ballYdir = r.nextInt(2)-2;

    // use BufferedImage to draw
    private BufferedImage image;
    private Graphics2D graphic;

    public void setScore(int score) {
        this.score = score;
    }

    public int getScore() {
        return score;
    }

    public GamePlayScreen() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        this.setTitle("Ball game");
        addKeyListener(this);
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);
        time = new Timer(delay, this);
        time.start();
        Thread t = new Thread(this);
        t.start();
        image = new BufferedImage(this.getWidth(), this.getHeight(), BufferedImage.TYPE_INT_RGB);
//        graphic=(Graphics2D) image.getGraphics();
//        draw();
    }

//    public void draw(){
//        graphic.setColor(Color.WHITE);
//        graphic.fillRect(0, 0, this.getWidth(), this.getHeight());
//    }
    
    public void paint(Graphics g) {

//        graphic.setColor(Color.WHITE);
//        graphic.fillRect(0, 0, this.getWidth(), this.getHeight());

//        background
//        draw image for background
//        super.paintComponents(g);
//        ImageIcon i = new ImageIcon("D:\\background_universe.jpg");
//        i.paintIcon(this, g, 0, 0);

        Graphics g2 = image.getGraphics();
        g.setColor(Color.BLACK);
        g.fillRect(1, 1, 793, 593);

        // the border
        g.setColor(Color.red);
        g.fillRect(0, 0, 4, 593);
        g.fillRect(0, 0, 793, 4);
        g.fillRect(790, 0, 4, 593);

        // the paddle
        g.setColor(Color.RED);
        g.fillRect(playerX, 560, 90, 8);

        // the ball
        g.setColor(Color.WHITE);
        g.fillOval(ballposX, ballposY, 30, 30);

        if (ballposY > 570) {
            play = false;
            ballXdir = 0;
            ballYdir = 0;
            g.setColor(Color.white);
            g.setFont(new Font("arial", Font.BOLD, 30));
            g.drawString("Game over !", 320, 250);
            g.setFont(new Font("arial", Font.BOLD, 30));
            g.drawString("Your score: " + score, 310, 280);
            setScore(score);
        }
        //g.dispose();
        //animation(image.getGraphics());
        //g.drawImage(image, 0, 0, null);
    }

    public void update(Graphics g) {
        paint(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 778, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 540, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GamePlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GamePlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GamePlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GamePlayScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GamePlayScreen().setVisible(true);
            }
        });
    }

    @Override
    public void keyTyped(KeyEvent e) {
    }

    @Override
    public void keyReleased(KeyEvent e) {
    }

    @Override
    public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
            if (playerX >= 680) {
                playerX = 680;
            } else {
                moveRight();
            }
        }
        if (e.getKeyCode() == KeyEvent.VK_LEFT) {
            if (playerX <= 10) {
                playerX = 10;
            } else {
                moveLeft();
            }
        }
    }

    private void moveLeft() {
        play = true;
        playerX -= 30;
    }

    private void moveRight() {
        play = true;
        playerX += 30;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (play) {
            if (new Rectangle(ballposX, ballposY, 30, 30).intersects(new Rectangle(playerX, 560, 90, 8))) {
                ballYdir = -ballYdir;
                score = score + 10;
            }
            ballposX += ballXdir;
            ballposY += ballYdir;
            if (ballposX < 0) {
                ballXdir = -ballXdir;
            }
            if (ballposY < 0) {
                ballYdir = -ballYdir;
            }
            if (ballposX > 770) {
                ballXdir = -ballXdir;
            }
        }
        //repaint();
        play = true;
    }

    @Override
    public void run() {
        while (true) {
            try {
                repaint();
                //paint(this.getGraphics());
                Thread.sleep(3);
            } catch (InterruptedException ex) {
                Logger.getLogger(GamePlayScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
